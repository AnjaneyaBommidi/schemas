title: JSON Schema
description: >-
  A full JSON Schema, which allows the user to define any data type, including primitives, objects,
  arrays, enumerations, etc.  They can also use "allOf", "anyOf", "oneOf", and "not" to create
  derived types, compound types, etc.
type: object
properties:
  title:
    type: string
    minLength: 0
  description:
    type: string
    minLength: 0
  type:
    anyOf:
      - $ref: "#/definitions/TypeName"
      - type: array
        items:
          $ref: "#/definitions/TypeName"
        minItems: 1
        uniqueItems: true
  default:
    $ref: ../types.yaml#/definitions/AnyType
  minimum:
    type: number
  maximum:
    type: number
  exclusiveMinimum:
    type: boolean
    default: false
  exclusiveMaximum:
    type: boolean
    default: false
  multipleOf:
    type: number
    minimum: 0
    exclusiveMinimum: true
  maxLength:
    $ref: ../types.yaml#/definitions/PositiveInteger
  minLength:
    $ref: ../types.yaml#/definitions/PositiveIntegerDefault0
  format:
    type: string
    minLength: 1
  pattern:
    type: string
    format: regex
  enum:
    type: array
    items:
      $ref: ../types.yaml#/definitions/AnyType
    minItems: 1
    uniqueItems: true
  items:
    anyOf:
      - $ref: "#"
      - $ref: "#/definitions/JsonSchemaArray"
  additionalItems:
    anyOf:
      - type: boolean
      - $ref: "#"
  maxItems:
    $ref: ../types.yaml#/definitions/PositiveInteger
  minItems:
    $ref: ../types.yaml#/definitions/PositiveIntegerDefault0
  uniqueItems:
    type: boolean
    default: false
  maxProperties:
    $ref: ../types.yaml#/definitions/PositiveInteger
  minProperties:
    $ref: ../types.yaml#/definitions/PositiveIntegerDefault0
  required:
    $ref: ../types.yaml#/definitions/StringArray
  properties:
    $ref: "#/definitions/JsonSchemaMap"
  patternProperties:
    $ref: "#/definitions/JsonSchemaMap"
  additionalProperties:
    anyOf:
      - type: boolean
      - $ref: "#"
  definitions:
    $ref: "#/definitions/JsonSchemaMap"
  dependencies:
    type: object
    patternProperties:
      ".*":
        anyOf:
          - $ref: "#"
          - $ref: ../types.yaml#/definitions/StringArray
  allOf:
    $ref: "#/definitions/JsonSchemaArray"
  anyOf:
    $ref: "#/definitions/JsonSchemaArray"
  oneOf:
    $ref: "#/definitions/JsonSchemaArray"
  not:
    $ref: "#"
patternProperties:
  "^_":
    $ref: ../types.yaml#/definitions/AnyType
additionalProperties: false

dependencies:
    exclusiveMaximum: [ maximum ]
    exclusiveMinimum: [ minimum ]

definitions:
  TypeName:
    type: string
    enum: ["array", "boolean", "integer", "null", "number", "object", "string"]

  JsonReference:
    type: object
    required:
      - $ref
    properties:
      $ref:
        type: string
        minLength: 1
    additionalProperties: true

  JsonSchemaArray:
    type: array
    minItems: 1
    items:
      $ref: "#"

  JsonSchemaMap:
    type: object
    description: >-
      An object whose properties must be JSON Schemas.
      If a property name begins with an underscore, then it is considered metadata, so it can be any type.
    patternProperties:
      ".*":
        $ref: "#"
      "^_":
        $ref: ../types.yaml#/definitions/AnyType
    additionalProperties: false
