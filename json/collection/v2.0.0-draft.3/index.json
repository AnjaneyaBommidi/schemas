{
  "title": "Postman Collection Format v2.0",
  "type": "object",
  "required": [
    "info"
  ],
  "properties": {
    "info": {
      "$ref": "#/definitions/Info"
    },
    "variables": {
      "$ref": "#/definitions/Variables"
    },
    "examples": {
      "$ref": "#/definitions/SpecialFolder"
    },
    "tests": {
      "$ref": "#/definitions/SpecialFolder"
    },
    "requests": {
      "$ref": "#/definitions/SpecialFolder"
    }
  },
  "patternProperties": {
    "^_": {
      "$ref": "#/definitions/JsonSchema/definitions/AnyType"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Info": {
      "title": "Information",
      "description": "Top-level information about the Postman Collection",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "title": "Name of the collection",
          "description": "A collection's friendly name is defined by this field. You would want to set this field to a value that would allow you to easily identify this collection among a bunch of other collections, as such outlining its usage or content."
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "title": "Description of the collection",
          "description": "Provide a long description of this collection using this field. This field supports markdown syntax to better format the description."
        },
        "version": {
          "title": "Version",
          "description": "A version number, either as a string or as an object",
          "oneOf": [
            {
              "$ref": "#/definitions/Info/properties/version/definitions/VersionString"
            },
            {
              "$ref": "#/definitions/Info/properties/version/definitions/VersionObject"
            }
          ],
          "definitions": {
            "VersionString": {
              "type": "string",
              "minLength": 1,
              "pattern": "\\d+(\\.\\d+){0,2}(-.*)",
              "description": "A Semantic Versioniing (http://semver.org/) string"
            },
            "VersionObject": {
              "type": "object",
              "required": [
                "major"
              ],
              "description": "Postman allows you to version your collections as they grow, and this field holds the version number. While optional, it is recommended that you use this field to its fullest extent!",
              "additionalProperties": false,
              "properties": {
                "major": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Increment this number if you make changes to the collection that changes its behaviour. E.g: Removing or adding new test scripts. (partly or completely)."
                },
                "minor": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0,
                  "description": "You should increment this number if you make changes that will not break anything that uses the collection. E.g: removing a folder."
                },
                "patch": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0,
                  "description": "Ideally, minor changes to a collection should result in the increment of this number."
                },
                "identifier": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 10,
                  "description": "A human friendly ideantifier to make sense of the version numbers. E.g: 'beta-3'"
                }
              },
              "patternProperties": {
                "^_": {
                  "$ref": "#/definitions/JsonSchema/definitions/AnyType"
                }
              }
            }
          }
        }
      },
      "patternProperties": {
        "^_": {
          "$ref": "#/definitions/JsonSchema/definitions/AnyType"
        }
      },
      "additionalProperties": false
    },
    "Variables": {
      "title": "Variables",
      "description": "Using variables in your Postman requests eliminates the need to duplicate requests, which can save a lot of time. Variables can be referenced anywhere in a request.\nVariables defined at the top-level of a collection can be overridden by variables defined at lower levels of the collection, such as in an Endpoint or in a Request.\nCollection Variables can be overridden by Environment Variables in Postman and Newman.",
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z]\\w+$": {
          "$ref": "#/definitions/JsonSchema/definitions/AnyType"
        },
        "^_": {
          "$ref": "#/definitions/JsonSchema/definitions/AnyType"
        }
      },
      "additionalProperties": false
    },
    "SpecialFolder": {
      "title": "Special Folder",
      "description": "The Postman Collection Format defines a few special top-level folders that have explicit purposes:\n\n- examples:\n  This folder is for requests that are meant to be examples of how to use your API. They will usually\n  contain sample data, populated headers, and often even saved responses.  These requests usually\n  don't have any scripts.\n\n- tests:\n  This folder is for requests that are meant to test specific functionality of your API.  This can\n  include end-to-end tests, smoke tests, uptime monitoring, etc.  It's very common for these tests\n  to contain scripts and use variables to store state between requests.  It's also very common for\n  this folder to contain many sub-folders for different test runs.  When using the Newman command-line\n  tool, you can choose to run a specific sub-folder within this folder.\n\n- requests:\n  This is a catch-all folder for any type of request, or for requests that don't belong in one\n  of the other folders.  For example, this is a good place to save requests that you use frequently\n  during debugging or development of your API.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "description": {
          "type": "string",
          "minLength": 0,
          "description": "A description of the folder. This field supports markdown syntax to better format the description.\n"
        },
        "items": {
          "title": "Items",
          "description": "An array of requests and folders, in a specific order",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "title": "Folder",
                "description": "A folder can contain one or more HTTP requests, in a specific order.\nIt can also contain other folders, allowing for an infinitely-deep level of nesting.",
                "type": "object",
                "required": [
                  "name",
                  "items"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The folder name"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 0,
                    "description": "A description of the folder. This field supports markdown syntax to better format the description.\n"
                  },
                  "items": {
                    "$ref": "#/definitions/SpecialFolder/properties/items",
                    "description": "The contents of the folder. This can include HTTP requsts, as well as other folders."
                  }
                },
                "patternProperties": {
                  "^_": {
                    "$ref": "#/definitions/JsonSchema/definitions/AnyType"
                  }
                },
                "additionalProperties": false
              },
              {
                "title": "Postman Request",
                "description": "Contains a full HTTP request, including headers, form fields, request body, and possibly one or more responses.",
                "type": "object",
                "required": [
                  "method",
                  "url"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A friendly name can be added to each request"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 0,
                    "description": "A description of the request. This field supports markdown syntax to better format the description.\n"
                  },
                  "url": {
                    "type": "string",
                    "minLength": 0,
                    "description": "The request URL (e.g. \"http://company.com/api/v1/users?username=jdoe\"). You can use variables in double curly brackets anywhere in the URL string (e.g. `{{protocol}}://{{server_name}}:{{port_number}}/api/{{version_number}}/users?username={{user_name}}`).\n"
                  },
                  "method": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The HTTP method associated with this request",
                    "enum": [
                      "GET",
                      "PUT",
                      "POST",
                      "PATCH",
                      "DELETE",
                      "COPY",
                      "HEAD",
                      "OPTIONS",
                      "LINK",
                      "UNLINK",
                      "PURGE",
                      "LOCK",
                      "UNLOCK",
                      "PROPFIND",
                      "VIEW"
                    ]
                  }
                },
                "patternProperties": {
                  "^_": {
                    "$ref": "#/definitions/JsonSchema/definitions/AnyType"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          "minItems": 0
        }
      },
      "patternProperties": {
        "^_": {
          "$ref": "#/definitions/JsonSchema/definitions/AnyType"
        }
      },
      "additionalProperties": false
    },
    "JsonSchema": {
      "title": "JSON Schema",
      "description": "A JSON Schema object, which allows the user to define any data type, including primitives, objects, arrays, enumerations, etc.  They can also use \"allOf\", \"anyOf\", \"oneOf\", and \"not\" to create derived types, compound types, etc.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uri",
          "minLength": 0
        },
        "$schema": {
          "type": "string",
          "format": "uri",
          "minLength": 0
        },
        "title": {
          "type": "string",
          "minLength": 0
        },
        "description": {
          "type": "string",
          "minLength": 0
        },
        "type": {
          "anyOf": [
            {
              "$ref": "#/definitions/JsonSchema/definitions/TypeName"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JsonSchema/definitions/TypeName"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          ]
        },
        "default": {
          "$ref": "#/definitions/JsonSchema/definitions/AnyType"
        },
        "minimum": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "default": false
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "default": false
        },
        "multipleOf": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "maxLength": {
          "$ref": "#/definitions/JsonSchema/definitions/PositiveInteger"
        },
        "minLength": {
          "$ref": "#/definitions/JsonSchema/definitions/PositiveIntegerDefault0"
        },
        "pattern": {
          "type": "string",
          "format": "regex"
        },
        "enum": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonSchema/definitions/AnyType"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/JsonSchema"
            },
            {
              "$ref": "#/definitions/JsonSchema/definitions/SchemaArray"
            }
          ],
          "default": {}
        },
        "additionalItems": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/JsonSchema"
            }
          ],
          "default": {}
        },
        "maxItems": {
          "$ref": "#/definitions/JsonSchema/definitions/PositiveInteger"
        },
        "minItems": {
          "$ref": "#/definitions/JsonSchema/definitions/PositiveIntegerDefault0"
        },
        "uniqueItems": {
          "type": "boolean",
          "default": false
        },
        "maxProperties": {
          "$ref": "#/definitions/JsonSchema/definitions/PositiveInteger"
        },
        "minProperties": {
          "$ref": "#/definitions/JsonSchema/definitions/PositiveIntegerDefault0"
        },
        "required": {
          "$ref": "#/definitions/JsonSchema/definitions/StringArray"
        },
        "properties": {
          "$ref": "#/definitions/JsonSchema/definitions/Object"
        },
        "patternProperties": {
          "$ref": "#/definitions/JsonSchema/definitions/Object"
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/JsonSchema"
            }
          ],
          "default": {}
        },
        "definitions": {
          "$ref": "#/definitions/JsonSchema/definitions/Object"
        },
        "dependencies": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "anyOf": [
                {
                  "$ref": "#/definitions/JsonSchema"
                },
                {
                  "$ref": "#/definitions/JsonSchema/definitions/StringArray"
                }
              ]
            }
          }
        },
        "allOf": {
          "$ref": "#/definitions/JsonSchema/definitions/SchemaArray"
        },
        "anyOf": {
          "$ref": "#/definitions/JsonSchema/definitions/SchemaArray"
        },
        "oneOf": {
          "$ref": "#/definitions/JsonSchema/definitions/SchemaArray"
        },
        "not": {
          "$ref": "#/definitions/JsonSchema"
        }
      },
      "patternProperties": {
        "^_": {
          "$ref": "#/definitions/JsonSchema/definitions/AnyType"
        }
      },
      "additionalProperties": false,
      "dependencies": {
        "exclusiveMaximum": [
          "maximum"
        ],
        "exclusiveMinimum": [
          "minimum"
        ]
      },
      "default": {},
      "definitions": {
        "SchemaArray": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/JsonSchema"
          }
        },
        "PositiveInteger": {
          "type": "integer",
          "minimum": 0
        },
        "PositiveIntegerDefault0": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "TypeName": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 0
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "Object": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/JsonSchema"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/JsonSchema"
          },
          "default": {}
        },
        "AnyType": {
          "type": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ],
          "minimum": 5e-324,
          "minLength": 0,
          "additionalProperties": true,
          "patternProperties": {
            ".*": {
              "$ref": "#/definitions/JsonSchema/definitions/AnyType"
            }
          },
          "items": {
            "$ref": "#/definitions/JsonSchema/definitions/AnyType"
          },
          "minItems": 0,
          "additionalItems": true
        }
      }
    }
  }
}